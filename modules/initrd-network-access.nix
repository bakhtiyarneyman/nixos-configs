{
  config,
  lib,
  pkgs,
  yubikeys,
  ...
}: let
  cfg = config.boot.initrd.network.access;
in {
  options.boot.initrd.network.access = with lib; {
    enable = mkEnableOption "Enable remote access via port 911";

    unlockOnly = mkEnableOption "Only allow unlocking of the root filesystem as opposed to general SSH access";

    tailscaleState = mkOption {
      type = with types; nullOr path;
      default = null;
      description = lib.mdDoc ''
        Path to a pre-initialized Tailscale state file. This is needed to authenticate the
        connection to Tailscale.
        This can be generated by manually connecting to Tailscale:
        ```bash
        sudo systemctl stop tailscaled.service # if Tailscale is already running
        tailscaled -port 9993 -state tailscaled-initrd.state -tun userspace-networking -socket ./tailscaled.sock &
        TAILSCALED_PID=$!
        tailscale -socket ./tailscaled.sock up -hostname "$HOST-initrd"
        tailscale -socket ./tailscaled.sock down
        kill $TAILSCALED_PID
        sudo systemctl start tailscaled.service # if Tailscale was already running
        ```
        It is recommended to disable key expiry for this host in the Tailscale admin interface.
        Otherwise, authentication with the state file will fail once it expires.
        ::: {.warning}
        Unless your bootloader supports initrd secrets, this configuration is stored insecurely in
        the global Nix store.
        :::
      '';
    };
  };

  config = lib.mkIf cfg.enable {
    boot.initrd = let
      banner =
        if cfg.unlockOnly
        then "Password to decrypt the disks?"
        else "To unlock the root filesystem, run `systemd-tty-ask-password-agent`.";
      baseFragment = {
        availableKernelModules = ["ctr" "ccm"] ++ config.networking.kernelModules;
        network = {
          enable = true;
          ssh = {
            enable = true;
            port = 911;
            hostKeys = ["/etc/ssh/initrd_ssh_host_ed25519_key"];
            # Password-based login is disabled in the initrd.
            authorizedKeys =
              map (
                key:
                  if cfg.unlockOnly
                  then ''command="echo '${banner}' && systemd-tty-ask-password-agent",restrict ${key}''
                  else ''command="echo '${banner}' && bash" ${key}''
              )
              yubikeys;
          };
        };
        systemd = {
          network = {
            enable = true;
            wait-online.anyInterface = true;
            networks."10-wired" = {
              matchConfig.Name = "en*";
              networkConfig.DHCP = "yes";
            };
          };
          initrdBin = [
            pkgs.unixtools.ping
            pkgs.unixtools.nettools
          ];
        };
      };

      wifiFragment = lib.mkIf (config.networking.wifiInterface != null) (let
        interface = config.networking.wifiInterface;
      in {
        availableKernelModules = ["ctr" "ccm"] ++ config.networking.kernelModules;

        secrets = {
          "/etc/wpa_supplicant/wpa_supplicant-${interface}.conf" =
            /root/wpa_supplicant.conf;
        };
        systemd = {
          packages = [pkgs.wpa_supplicant];
          initrdBin = [
            pkgs.wpa_supplicant
          ];

          targets.initrd.wants = ["wpa_supplicant@${interface}.service"];
          services."wpa_supplicant@".unitConfig.DefaultDependencies = false;

          network.networks."20-wlan" = {
            matchConfig.Name = interface;
            networkConfig.DHCP = "yes";
          };
        };
      });

      tailscaleCfg = config.services.tailscale;
      tailscaleFragment = lib.mkIf (cfg.tailscaleState != null) {
        systemd.packages = [tailscaleCfg.package];
        systemd.initrdBin = [pkgs.iptables pkgs.iproute2 tailscaleCfg.package];
        availableKernelModules = ["tun" "nft_chain_nat"];

        secrets = {
          "/var/lib/tailscale/tailscaled.state" = cfg.tailscaleState;
        };

        systemd.services.tailscaled = {
          wantedBy = ["initrd.target"];
          serviceConfig.Environment = [
            "PORT=${toString tailscaleCfg.port}"
            ''"FLAGS=--tun ${lib.escapeShellArg tailscaleCfg.interfaceName}"''
          ];
          unitConfig.DefaultDependencies = false;
        };
      };
    in
      lib.mkMerge [
        baseFragment
        wifiFragment
        tailscaleFragment
      ];
  };
}
