# Based on https://gist.github.com/al3xtjames/51f42344b54bdd34fd550a78f818066e
{
  config,
  lib,
  pkgs,
  ...
}: let
  stateFile = config.boot.initrd.network.tailscale.state;
  cfg = config.services.tailscale;
in {
  options = {
    boot.initrd.network.tailscale = with lib; {
      state = mkOption {
        type = types.path;
        description = lib.mdDoc ''
          Path to a pre-initialized Tailscale state file. This is needed to authenticate the
          connection to Tailscale.
          This can be generated by manually connecting to Tailscale:
          ```bash
          sudo systemctl stop tailscaled.service # if Tailscale is already running
          tailscaled -port 9993 -state tailscaled-initrd.state -tun userspace-networking -socket ./tailscaled.sock &
          TAILSCALED_PID=$!
          tailscale -socket ./tailscaled.sock up -hostname "$HOST-initrd"
          tailscale -socket ./tailscaled.sock down
          kill $TAILSCALED_PID
          sudo systemctl start tailscaled.service # if Tailscale was already running
          ```
          It is recommended to disable key expiry for this host in the Tailscale admin interface.
          Otherwise, authentication with the state file will fail once it expires.
          ::: {.warning}
          Unless your bootloader supports initrd secrets, this configuration is stored insecurely in
          the global Nix store.
          :::
        '';
      };
    };
  };

  config = lib.mkIf (stateFile != null) {
    boot.initrd = {
      systemd.packages = [cfg.package];
      systemd.initrdBin = [pkgs.iptables pkgs.iproute2 cfg.package];
      availableKernelModules = ["tun" "nft_chain_nat"];

      secrets = {
        "/var/lib/tailscale/tailscaled.state" = stateFile;
      };

      systemd.services.tailscaled = {
        wantedBy = ["initrd.target"];
        serviceConfig.Environment = [
          "PORT=${toString cfg.port}"
          ''"FLAGS=--tun ${lib.escapeShellArg cfg.interfaceName}"''
        ];
        unitConfig.DefaultDependencies = false;
      };
    };
  };
}
